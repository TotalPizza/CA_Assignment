geom_smooth(method="loess", se=F) +
xlim(c(0, 1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
ggplot(FallAlter, aes(x=AnzahlFall, y=Altersgruppe)) +
geom_point(aes(col=Bundesland) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
FallAlter <- aggregate(FallAlter$AnzahlFall, list(FallAlter$Altersgruppe,FallAlter$Bundesland), sum)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(FallAlter$Altersgruppe,FallAlter$Bundesland), sum)
FallAlter <- select(CovidData, AnzahlFall, Altersgruppe, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(FallAlter$Altersgruppe,FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=AnzahlFall, y=Altersgruppe)) +
geom_point(aes(col=Bundesland) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 1)) +
ylim(c(0, 500000)) +
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot",
caption = "Source: midwest")
ggplot(FallAlter, aes(x=AnzahlFall, y=Altersgruppe)) +
FallAlter <- select(CovidData, AnzahlFall, Altersgruppe, Bundesland)
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
CovidData <- read.csv("C:\\Users\\Marlon\\Desktop\\Stuff\\Uni\\ComputerGraphik\\CA_Assignment\\Assignment3\\RKI_COVID19.csv", header = TRUE)
CovidData <- read.csv("C:\\Users\\Marlon\\Desktop\\Stuff\\Uni\\ComputerGraphik\\CA_Assignment\\Assignment3\\RKI_COVID19.csv", header = TRUE)
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(FallAlter$AlterZahl,FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=AnzahlFall, y=AlterZahl)) +
geom_point()
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AnzahlFall = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(AnzahlFall = FallAlter$AnzahlFall, list(AnzahlFall = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
FallAlter <- aggregate(AnzahlFall = FallAlter$AnzahlFall, list(AnzahlFall = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(AnzahlFall = FallAlter$AnzahlFall, list(AnzahlFall = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AnzahlFall = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=AnzahlFall, y=x)) +
geom_point()
ggplot(FallAlter, aes(x=AnzahlFall, y=x)) +
scale_fill_brewer(palette = "Spectral")
ggplot(FallAlter, aes(x=x, y=AnzahlFall)) +
scale_fill_brewer(palette = "Spectral")
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AlterZahl = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=x, y=AnzahlFall)) +
scale_fill_brewer(palette = "Spectral")
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AlterZahl = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=x, y=AlterZahl)) +
scale_fill_brewer(palette = "Spectral")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Spectral")
theme_set(theme_classic())
theme_set(theme_bw())
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AlterZahl = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Spectral") +
geom_histogram(aes(fill=Bundesland),
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
FallAlter <- select(CovidData, AnzahlFall, AlterZahl, Bundesland)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(AlterZahl = FallAlter$AlterZahl, Bundesland = FallAlter$Bundesland), sum)
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Spectral") +
geom_histogram(aes(fill=Bundesland),
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Spectral") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Set1") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "RdBu") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Accent") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Paired") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Manaul") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Set3") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggplot(FallAlter, aes(x=AlterZahl, y=x)) +
scale_fill_brewer(palette = "Set3") +
geom_histogram(aes(fill=Bundesland),
stat='identity',
binwidth = .1,
col="black",
size=.1) +
labs(title="Histogram",
subtitle="AnzahlFall per Alter")
FallGeschlecht <- select(CovidData, Geschlecht, AnzahlFall)
FallAlter <- aggregate(FallAlter$AnzahlFall, list(Geschlecht = FallGeschlecht$Geschlecht), sum)
FallGeschlecht <- select(CovidData, Geschlecht, AnzahlFall)
FallAlter <- aggregate(FallGeschlecht$AnzahlFall, list(Geschlecht = FallGeschlecht$Geschlecht), sum)
View(FallGeschlecht)
FallGeschlecht <- select(CovidData, Geschlecht, AnzahlFall)
FallGeschlecht <- aggregate(FallGeschlecht$AnzahlFall, list(Geschlecht = FallGeschlecht$Geschlecht), sum)
ggplot(FallAlter, aes(x="", y=Geschlecht, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(FallAlter, aes(x="", y=Geschlecht, fill=AnzahlFall)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(FallAlter, aes(x="", y=AnzahlFall, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(FallAlter, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
FallGeschlecht <- select(CovidData, Geschlecht, AnzahlFall)
FallGeschlecht <- aggregate(FallGeschlecht$AnzahlFall, list(Geschlecht = FallGeschlecht$Geschlecht), sum)
ggplot(FallAlter, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(FallAlter, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
theme_void()
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void()
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Geschlecht), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = x, label = Geschlecht), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(FallGeschlecht, aes(x="", y=x, fill=Geschlecht)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void()
View(CovidData)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
theme_set(theme_bw())
theme_set(theme_classic())
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
View(FallDatum)
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
##Linien Diagram: Akkumulierte Anzahl Fälle
Erstellen eines neuen DataFrames (Selektieren des gemeleldeten zeitpunktes und die Anzahl der Fälle)
```{r}
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
```
Fälle nach Tag aufsummieren
```{r}
FallDatum <- aggregate(FallDatum$AnzahlFall, list(Datum = FallDatum$Meldedatum), sum)
```
ggplot(data=FallDatum, aes(x=Datum, y=AnzahlFall, group=1)) +
geom_line()
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
FallDatum <- aggregate(AnzahlFall = FallDatum$AnzahlFall, list(Meldedatum = FallDatum$Meldedatum), sum)
FallDatum <- aggregate(FallDatum$AnzahlFall, list(Meldedatum = FallDatum$Meldedatum), sum)
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
View(FallDatum)
FallDatum <- aggregate(FallDatum$AnzahlFall, list(Meldedatum = FallDatum$Meldedatum), sum)
ggplot(data=FallDatum, aes(x=Meldedatum, y=x, group=1)) +
geom_line()
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
View(FallBundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
library(ggdendro)
install.packages("ggdendro")
library(ggdendro)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggdendro)
library(dplyr)
theme_set(theme_bw())
theme_set(theme_classic())
hc <- hclust(dist(FallBundesland), "ave")
ggdendrogram(hc, rotate = TRUE, size = 2)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
hc <- hclust(dist(FallBundesland), "ave")
ggdendrogram(hc, rotate = TRUE, size = 2)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
hc <- hclust(dist(Bundesland), "ave")
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
hc <- hclust(dist(FallBundesland), "complete")
ggdendrogram(hc, rotate = TRUE, size = 2)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
dist(as.matrix(FallBundesland))
hc <- hclust(dist(FallBundesland), "complete")
ggdendrogram(hc, rotate = TRUE, size = 2)
View(hc)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
head(FallBundesland)
d <- dist(FallBundesland, method = "euclidean")
hc <- hclust(d, "complete")
ggdendrogram(hc, rotate = TRUE, size = 2)
ggdendrogram(hc, size = 2)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
rownames(FallBundesland) <- FallBundesland$Bundesland
FallBundesland <- FallBundesland$x
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
rownames(FallBundesland) <- FallBundesland$Bundesland
FallBundeslandV2 <- FallBundesland$x
rownames(FallBundeslandV2) <- FallBundesland$Bundesland
subset(FallBundesland, select=-c(Bundesland)
FallBundesland <- subset(FallBundesland, select=-c(Bundesland)
FallBundesland <- FallBundesland[ , c("x")]
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
#rownames(FallBundesland) <- FallBundesland$Bundesland
hc <- hclust(dist(d), "complete")
plot(hc)
hc$order
plot(hc)
hc$order
View(FallBundesland)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
#rownames(FallBundesland) <- FallBundesland$Bundesland
hc <- hclust(dist(d), "complete")
hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
plot(hc)
ggdendrogram(hc, rotate = TRUE, size = 2)
FallBundesland <- FallBundesland[ , c("x")]
hc <- hclust(dist(d), "complete")
hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
ggdendrogram(hc, rotate = TRUE, size = 2)
hc <- hclust(dist(FallBundesland), "complete")
hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
ggdendrogram(hc, rotate = TRUE, size = 2)
hc$order
ggdendrogram(hc, rotate = TRUE, size = 2)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
##4. Linien Diagram: Akkumulierte Anzahl Fälle
Erstellen eines neuen DataFrames (Selektieren des gemeleldeten zeitpunktes und die Anzahl der Fälle)
```{r}
FallDatum <- select(CovidData, Meldedatum, AnzahlFall)
```
Fälle nach Tag aufsummieren
```{r}
FallDatum <- aggregate(FallDatum$AnzahlFall, list(Meldedatum = FallDatum$Meldedatum), sum)
```
Plot Erstellen
```{r}
ggplot(data=FallDatum, aes(x=Meldedatum, y=x, group=1)) +
geom_line()
```
##5. Hirarchisches Dendogram:
Hierfür können wir das Gleiche Dataframe wie in Graph 1 nutzen:
```{r}
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
```
Anzahl Fälle nach Bundesland Aufsummieren
```{r}
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
```
```{r}
FallBundesland <- FallBundesland[ , c("x")]
hc <- hclust(dist(FallBundesland), "complete")
hc$order
hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
ggdendrogram(hc, rotate = TRUE, size = 2)
View(hc)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
FallBundesland <- FallBundesland[ , c("x")]
hc <- hclust(dist(FallBundesland), "ave")
hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
ggdendrogram(hc, rotate = TRUE, size = 2)
hc$order
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
FallBundesland <- select(CovidData, AnzahlFall, Bundesland)
FallBundesland <- aggregate(FallBundesland$AnzahlFall, list(Bundesland = FallBundesland$Bundesland), sum)
column_to_rownames(FallBundesland, var = "Bundesland")
library(tibble)
column_to_rownames(FallBundesland, var = "Bundesland")
FallBundesland <- column_to_rownames(FallBundesland, var = "Bundesland")
hc <- hclust(dist(FallBundesland), "ave")
#hc$order
#hc$labels <- c("Hamburg","Sachsen-Anhalt","Brandenburg","Thueringen","Bremen","Mecklenburg","Saaralnd","Schleswig-Holstein","Hessen","Sachsen","Rheinland-Pfalz","Berlin","Niedersachsen","BadenWuerttemberg","Bayern","Nordrein-Westfalen")
ggdendrogram(hc, rotate = TRUE, size = 2)
setwd("C:/Users/Marlon/Desktop/Stuff/Uni/ComputerGraphik/CA_Assignment/Assignment3/RProject")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggdendro)
library(dplyr)
library(tibble)
library(tidyverse)
theme_set(theme_bw())
theme_set(theme_classic())
CovidData <- read.csv("./RProject/RKI_COVID19.csv", header = TRUE)
summary(CovidData$Geschlecht)
summary(CovidData$AnzahlFall)
```{r}
View(CovidData)
setwd("C:/Users/Marlon/Desktop/New folder/CA_Assignment/Assignment3/RProject")
library(shiny)
library(leaflet)
library(tidyverse)
library(maps)
library(sp)
runApp()
runApp()
BLData <- geojsonio::geojson_read("BLData.json", what = "sp")
CovidData <- read.csv("./RKI_COVID19.csv", header = TRUE)
#Faktoren Selectieren
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall, Meldedatum)
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall)
NachFallBundesland <- aggregate(NachFallBundesland$AnzahlFall, list(Bundesland = NachFallBundesland$Bundesland, AnzahlTodesfall = NachFallBundesland$AnzahlTodesfall), sum)
runApp()
CovidData <- read.csv("./RKI_COVID19.csv", header = TRUE)
runApp()
BLData <- geojsonio::geojson_read("BLData.json", what = "sp")
CovidData <- read.csv("./RKI_COVID19.csv", header = TRUE)
#Faktoren Selectieren
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall, Meldedatum)
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall)
NachFallBundesland <- aggregate(. ~Bundesland, data=NachFallBundesland, sum, na.rm=TRUE)
BLData@data = data.frame(BLData@data, NachFallBundesland[match(BLData@data[,"name"], NachFallBundesland[,"Bundesland"]),])
server <- function(input,output, session){
data <- reactive({
x <- BLData
})
labels <- sprintf(
"<strong>%s</strong><br/>Total Cases: %g <br/>Total Deaths: %g",
BLData$Bundesland, BLData$AnzahlFall, BLData$AnzahlTodesfall) %>%
lapply(htmltools::HTML)
output$mymap <- renderLeaflet({
BLData <- data()
m <- leaflet(BLData) %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL),
stroke = FALSE,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
})
}
runApp()
BLData <- geojsonio::geojson_read("BLData.json", what = "sp")
CovidData <- read.csv("./RKI_COVID19.csv", header = TRUE)
#Faktoren Selectieren
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall, Meldedatum)
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall)
NachFallBundesland <- aggregate(. ~Bundesland, data=NachFallBundesland, sum, na.rm=TRUE)
runApp()
BLData <- geojsonio::geojson_read("BLData.json", what = "sp")
CovidData <- read.csv("./RKI_COVID19.csv", header = TRUE)
#Faktoren Selectieren
NachFallBundesland <- select(CovidData, Bundesland, AnzahlFall, AnzahlTodesfall)
NachFallBundesland <- aggregate(. ~Bundesland, data=NachFallBundesland, sum, na.rm=TRUE)
View(NachFallBundesland)
BLData@data = data.frame(BLData@data, NachFallBundesland[match(BLData@data[,"name"], NachFallBundesland[,"Bundesland"]),])
server <- function(input,output, session){
data <- reactive({
x <- BLData
})
labels <- sprintf(
"<strong>%s</strong><br/>Total Cases: %g <br/>Total Deaths: %g",
BLData$Bundesland, BLData$AnzahlFall, BLData$AnzahlTodesfall) %>%
lapply(htmltools::HTML)
output$mymap <- renderLeaflet({
BLData <- data()
m <- leaflet(BLData) %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL),
stroke = FALSE,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
})
}
View(BLData)
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(leaflet)
library(tidyverse)
dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
tags$style(type = "text/css", "#map {height: calc(100vh - 80px) !important;}"),
leafletOutput("mymap",height = 1000),
),
box(
title = "Controls",
sliderInput("Datum",
"Datum:",
min = as.Date("2020-01-02","%Y-%m-%d"),
max = as.Date("2021-01-15","%Y-%m-%d"),
value=as.Date("2020-01-15"),
timeFormat="%Y-%m-%d")
)
)
)
)
library(shiny)
library(leaflet)
library(tidyverse)
library(maps)
library(sp)
runApp()
runApp()
View(NachFallBundesland)
View(NachFallBundesland)
runApp()
library(shiny)
library(leaflet)
library(tidyverse)
library(maps)
library(sp)
runApp()
runApp()
